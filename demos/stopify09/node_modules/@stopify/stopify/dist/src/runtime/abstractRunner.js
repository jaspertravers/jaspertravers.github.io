"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const suspend_1 = require("./suspend");
const makeEstimator_1 = require("./makeEstimator");
const setImmediate_1 = require("./setImmediate");
var EventProcessingMode;
(function (EventProcessingMode) {
    EventProcessingMode[EventProcessingMode["Running"] = 0] = "Running";
    EventProcessingMode[EventProcessingMode["Paused"] = 1] = "Paused";
    EventProcessingMode[EventProcessingMode["Waiting"] = 2] = "Waiting";
})(EventProcessingMode = exports.EventProcessingMode || (exports.EventProcessingMode = {}));
class AbstractRunner {
    constructor(opts) {
        this.opts = opts;
        this.kind = 'ok';
        this.onDone = (result) => { };
        this.onYield = function () { };
        this.onBreakpoint = function () { };
        this.breakpoints = [];
        // The runtime system starts executing the main body of the program.
        this.eventMode = EventProcessingMode.Running;
        this.eventQueue = [];
        this.onYieldFlag = { kind: 'resume' };
        this.mayYieldFlag = { kind: 'resume' };
        // The global object for Stopified code.
        this.g = Object.create(null);
    }
    mayYieldRunning() {
        const n = this.suspendRTS.linenum;
        if (typeof n !== 'number') {
            return false;
        }
        return this.breakpoints.includes(n);
    }
    /**
     * Indirectly called by the stopified program.
     */
    init(rts) {
        this.continuationsRTS = rts;
        const estimator = makeEstimator_1.makeEstimator(this.opts);
        this.suspendRTS = new suspend_1.RuntimeWithSuspend(this.continuationsRTS, this.opts.yieldInterval, estimator, () => {
            switch (this.mayYieldFlag.kind) {
                case 'resume':
                    return this.mayYieldRunning();
                default: //Step
                    // Yield control if the line number changes.
                    const maybeLine = this.suspendRTS.linenum;
                    if (typeof maybeLine !== 'number' || maybeLine === this.mayYieldFlag.currentLine) {
                        return false;
                    }
                    else {
                        this.mayYieldFlag.onStep(maybeLine);
                        return true;
                    }
            }
        }, () => {
            if (this.eventMode === EventProcessingMode.Waiting) {
                throw new Error('Stopify internal error: onYield invoked during pause+wait');
            }
            switch (this.onYieldFlag.kind) {
                case 'paused':
                    this.onYieldFlag.onPaused(this.suspendRTS.linenum);
                    this.onYieldFlag = { kind: 'pausedAndMayYield' };
                    return false;
                case 'pausedAndMayYield':
                    throw new Error(`onYield called while paused. Do not call .resume()
            in the callback passed to .pause(). Resume in another turn.`);
                case 'resume':
                    if (this.mayYieldRunning()) {
                        this.onYieldFlag = {
                            kind: 'paused',
                            onPaused: (line) => {
                                if (line === undefined) {
                                    throw new Error(`Calling onBreakpoint with undefined as the line`);
                                }
                                this.onBreakpoint(line);
                            }
                        };
                        this.eventMode = EventProcessingMode.Paused;
                        // Invoke the breakpoint handler on the next turn, after the stack
                        // is fully reified.
                        setImmediate_1.setImmediate(() => this.onBreakpoint(this.suspendRTS.linenum));
                        return false;
                    }
                    this.onYield();
                    return true;
                default: // Step
                    return !this.suspendRTS.mayYield();
            }
        });
        return this;
    }
    /**
     * Called by the stopified program.
     */
    suspend() {
        return this.suspendRTS.suspend();
    }
    /**
     * Called by the stopified program.
     */
    onEnd(result) {
        this.eventMode = EventProcessingMode.Waiting;
        this.onDone(result);
        this.processQueuedEvents();
    }
    runInit(onDone, onYield, onBreakpoint) {
        if (onYield) {
            this.onYield = onYield;
        }
        if (onBreakpoint) {
            this.onBreakpoint = onBreakpoint;
        }
        this.onDone = onDone;
    }
    pause(onPaused) {
        if (this.eventMode === EventProcessingMode.Paused) {
            throw new Error('the program is already paused');
        }
        if (this.eventMode === EventProcessingMode.Waiting) {
            onPaused(); // onYield will not be invoked
        }
        else {
            this.onYieldFlag = { kind: 'paused', onPaused };
        }
        this.eventMode = EventProcessingMode.Paused;
    }
    setBreakpoints(lines) {
        this.breakpoints = lines;
    }
    resume() {
        if (this.eventMode === EventProcessingMode.Waiting) {
            return;
        }
        if (this.eventMode === EventProcessingMode.Running) {
            throw new Error(`invokes .resume() while the program is running`);
        }
        // Program was paused, but there was no active continuation.
        if (this.suspendRTS.continuation === suspend_1.badResume) {
            this.eventMode = EventProcessingMode.Waiting;
            this.processQueuedEvents();
        }
        else {
            this.eventMode = EventProcessingMode.Running;
            this.mayYieldFlag = { kind: 'resume' };
            this.onYieldFlag = { kind: 'resume' };
            this.suspendRTS.resumeFromCaptured();
        }
    }
    // NOTE: The program remains Paused while stepping.
    step(onStep) {
        if (this.eventMode !== EventProcessingMode.Paused) {
            throw new Error(`step(onStep) requires the program to be paused`);
        }
        this.mayYieldFlag = { kind: 'step', currentLine: this.suspendRTS.linenum, onStep };
        this.onYieldFlag = { kind: 'step' };
        this.suspendRTS.resumeFromCaptured();
    }
    // NOTE: In both of the pause functions below, we don't switch the mode to
    // paused! This is because we don't want the user to be able to hit "step" at
    // this point.
    pauseK(callback) {
        return this.continuationsRTS.captureCC((k) => {
            return this.continuationsRTS.endTurn(onDone => {
                return callback((x) => {
                    return this.continuationsRTS.runtime(() => k(x), onDone);
                });
            });
        });
    }
    pauseImmediate(callback) {
        return this.continuationsRTS.captureCC((k) => {
            return this.continuationsRTS.endTurn(onDone => {
                this.k = { k, onDone };
                callback();
            });
        });
    }
    continueImmediate(x) {
        if (this.k === undefined) {
            throw new Error(`called continueImmediate before pauseImmediate`);
        }
        const { k, onDone } = this.k;
        this.k = undefined;
        return this.continuationsRTS.runtime(() => k(x), onDone);
    }
    externalHOF(body) {
        return this.continuationsRTS.captureCC((k) => this.continuationsRTS.endTurn(onDone => body(result => this.continuationsRTS.runtime(() => k(result), onDone))));
    }
    runStopifiedCode(body, callback) {
        this.continuationsRTS.runtime(body, callback);
    }
    processEvent(body, receiver) {
        this.eventQueue.push({ body, receiver });
        this.processQueuedEvents();
    }
    processQueuedEvents() {
        if (this.eventMode !== EventProcessingMode.Waiting) {
            return;
        }
        const eventHandler = this.eventQueue.shift();
        if (eventHandler === undefined) {
            return;
        }
        const { body, receiver } = eventHandler;
        this.eventMode = EventProcessingMode.Running;
        this.continuationsRTS.runtime(body, (result) => {
            this.eventMode = EventProcessingMode.Waiting;
            receiver(result);
            this.processQueuedEvents();
        });
    }
}
exports.AbstractRunner = AbstractRunner;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3RSdW5uZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcnVudGltZS9hYnN0cmFjdFJ1bm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHVDQUEwRDtBQUMxRCxtREFBZ0Q7QUFDaEQsaURBQThDO0FBRTlDLElBQVksbUJBSVg7QUFKRCxXQUFZLG1CQUFtQjtJQUM3QixtRUFBTyxDQUFBO0lBQ1AsaUVBQU0sQ0FBQTtJQUNOLG1FQUFPLENBQUE7QUFDVCxDQUFDLEVBSlcsbUJBQW1CLEdBQW5CLDJCQUFtQixLQUFuQiwyQkFBbUIsUUFJOUI7QUFrQkQsTUFBc0IsY0FBYztJQWtCbEMsWUFBb0IsSUFBaUI7UUFBakIsU0FBSSxHQUFKLElBQUksQ0FBYTtRQWpCOUIsU0FBSSxHQUFVLElBQUksQ0FBQztRQUduQixXQUFNLEdBQTZCLENBQUMsTUFBTSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEQsWUFBTyxHQUFlLGNBQWEsQ0FBQyxDQUFDO1FBQ3JDLGlCQUFZLEdBQTJCLGNBQWEsQ0FBQyxDQUFDO1FBQ3RELGdCQUFXLEdBQWEsRUFBRSxDQUFDO1FBRW5DLG9FQUFvRTtRQUMxRCxjQUFTLEdBQUcsbUJBQW1CLENBQUMsT0FBTyxDQUFDO1FBQzFDLGVBQVUsR0FBbUIsRUFBRSxDQUFDO1FBQ2hDLGdCQUFXLEdBQWlCLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDO1FBQy9DLGlCQUFZLEdBQW1CLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDO1FBRTFELHdDQUF3QztRQUNqQyxNQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVVLENBQUM7SUFFbEMsZUFBZTtRQUNyQixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztRQUNsQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUN6QixPQUFPLEtB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