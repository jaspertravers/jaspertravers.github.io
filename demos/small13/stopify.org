#+TITLE: Stopify

https://www.stopify.org/
https://github.com/plasma-umass/Stopify

https://stopify.readthedocs.io/en/latest/

outdated package:
https://www.npmjs.com/package/stopify

installed package:
https://www.npmjs.com/package/@stopify/stopify

last commit on github was feb though.

#+BEGIN_SRC sh
npm install @stopify/stopify
#+END_SRC

worth checking out building from the repo, but I'll run with npm for now

#+BEGIN_SRC html
<script type="text/javascript" src="node_modules/@stopify/stopify/dist/stopify-full.bundle.js"></script>
#+END_SRC

removing from ~main.js~:
#+BEGIN_SRC js
import Stopify from '@stopify/stopify';
#+END_SRC

https://stopify.readthedocs.io/en/latest/runtime.html
https://stopify.readthedocs.io/en/latest/illustrative_examples.html

I finally understand these for the first time, kinda

#+BEGIN_SRC js
const runner = stopify.stopifyLocally(program); //program : string of code
runner.g = {onClick, alert, window, runner}; //I'm guessing this is what it has access to
#+END_SRC

I'm guessing `runner.g` is set to the object of variables it has access to outside of it's sandbox. So, if we're going to attach dom nodes to ~window~, we're going to need ~window~. Look's like it needs ~runner~ to execute ~runner.processEvent~.

runner.g "declares an external"

pause vs pauseImmediate?
resume vs continueImmediate?

How to setup runner:

High level goal:
on =Run= "action":
- Get =task= from codemirror instance
- stopify =task=; create asyncRun instance with task
- run asyncRun instance
- have a pause button attached to asyncRun instance

 :related:
 https://codesandbox.io/
 https://editor.p5js.org/
 https://plnkr.co/
 https://www.builder.io/
 https://www.framer.com/
 https://github.com/samdenty/console-feed
 :end:

 get task on play, pause then pauses that task. Task is only "gotten" on play button

 task -> stopify
 run stopify
 pause stopify
 resume stopify

 how to attach a "dev tools" instance or console to a CM instance?
